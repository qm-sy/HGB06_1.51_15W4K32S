C51 COMPILER V9.60.7.0   SCREEN                                                            04/03/2025 14:49:13 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE SCREEN
OBJECT MODULE PLACED IN .\Output\screen.obj
COMPILER INVOKED BY: D:\APP\Keil_v5\C51\BIN\C51.EXE Src\screen.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Inc;D:\APP\Keil
                    -_v5\C51\INC) DEBUG OBJECTEXTEND PRINT(.\Listings\screen.lst) OBJECT(.\Output\screen.obj)

line level    source

   1          #include "STC15W4Kxx.h"
   2          #include "stdint.h"
   3          #include "delay.h"
   4          #include "intrins.h" 
   5          #include "screen.h"
   6          
   7          uint8_t value_03 = 0;  //该地址的值
   8          uint8_t value_06 = 0;
   9          uint8_t value_07 = 0;
  10          uint8_t value_0A = 0;
  11          uint8_t value_0B = 0;
  12          uint8_t value_0E = 0;
  13          uint8_t value_0F = 0; 
  14           
  15          uint8_t addr_tab[7] = { 0xc3,0xc6,0xc7,0xca,0xcb,0xce,0xcf};
  16          
  17          uint8_t num_tab[10] = {0xF5,0x05,0xD3,0x97,0x27,0xB6,0xF6,0x15,0xF7,0xB7};
  18                               /*  0    1    2    3    4    5    6    7    8    9  */
  19          
  20          void lcd_init()
  21          {
  22   1          TM1722_STB=1;            //端口配置初始化
  23   1          TM1722_CLK=1;
  24   1          TM1722_DIO=1;
  25   1          TM1722_Write_Byte(0x00); //工作模式
  26   1          TM1722_STB=1;
  27   1          TM1722_Write_Byte(0x44);   //固定地址模式
  28   1          TM1722_STB=1;
  29   1          
  30   1          lcd_clear();
  31   1          
  32   1          lcd_display();
  33   1      }
  34          
  35          void lcd_clear()  //清显示缓存
  36          {
  37   1          uint8_t i;
  38   1                       
  39   1          for(i=0;i<7;i++)
  40   1          {
  41   2              TM1722_Write_Byte(addr_tab[i]);
  42   2              TM1722_Write_Byte(0);
  43   2              TM1722_STB=1;    
  44   2          }
  45   1      }
  46          
  47          void lcd_display()  //显示开
  48          {
  49   1          TM1722_Write_Byte(0x93); 
  50   1          TM1722_STB=1;
  51   1      }
  52          
  53          void lcd_write_val(uint8_t addr,uint8_t dat)
  54          {
C51 COMPILER V9.60.7.0   SCREEN                                                            04/03/2025 14:49:13 PAGE 2   

  55   1          TM1722_Write_Byte(addr); 
  56   1          TM1722_Write_Byte(dat); 
  57   1          TM1722_STB=1;
  58   1      }
  59          
  60          /******************************************
  61          函数：写一字节函数
  62          参数：dat---写入的一字节数据
  63          返回值：无
  64          ******************************************/
  65          void TM1722_Write_Byte(uint8_t dat)
  66          {
  67   1        uint8_t i;
  68   1               
  69   1        delay_us(50); //用于片选信号的延时
  70   1        TM1722_STB=0;     //有效的片选信号
  71   1        for(i=0;i<8;i++)
  72   1        {
  73   2         TM1722_CLK = 0;
  74   2         TM1722_DIO = dat&0x01;
  75   2         TM1722_CLK = 1;    //时钟上升沿，送入一位数据
  76   2         dat>>=1;      
  77   2        }
  78   1        delay_us(50);   //用于片选信号的延时
  79   1      }
  80          
  81          void num_dis(uint8_t num)
  82          {
  83   1          uint8_t hundreds = num / 100;  // 获取百位数
  84   1          uint8_t tens = (num / 10) % 10;  // 获取十位数
  85   1          uint8_t ones = num % 10;  // 获取个位数
  86   1          
  87   1          value_0B &= 0x00;
  88   1          value_0A &= 0X00;
  89   1          value_07 &= 0X00;
  90   1          value_06 &= 0X00;
  91   1          
  92   1          value_0B |= (num_tab[hundreds]>>4);
  93   1          value_0A |= num_tab[hundreds];
  94   1          value_07 |= num_tab[tens];
  95   1          value_06 |= num_tab[ones]; 
  96   1      
  97   1          if((num<10)&&(num>=0))
  98   1          {
  99   2              lcd_write_val(addr_tab[ADDR_0B],0x00);
 100   2      
 101   2              lcd_write_val(addr_tab[ADDR_0A],0X00);
 102   2              
 103   2              lcd_write_val(addr_tab[ADDR_07],0X00);
 104   2      
 105   2              lcd_write_val(addr_tab[ADDR_06],value_06);  
 106   2          }
 107   1          else if((num<100)&&(num>=10))
 108   1          {
 109   2              lcd_write_val(addr_tab[ADDR_0B],0x00);
 110   2      
 111   2              lcd_write_val(addr_tab[ADDR_0A],0X00);
 112   2              
 113   2              lcd_write_val(addr_tab[ADDR_07],value_07);
 114   2      
 115   2              lcd_write_val(addr_tab[ADDR_06],value_06);   
 116   2          }
C51 COMPILER V9.60.7.0   SCREEN                                                            04/03/2025 14:49:13 PAGE 3   

 117   1          else
 118   1          {
 119   2              lcd_write_val(addr_tab[ADDR_0B],value_0B);
 120   2              
 121   2              lcd_write_val(addr_tab[ADDR_0A],value_0A);
 122   2              
 123   2              lcd_write_val(addr_tab[ADDR_07],value_07);
 124   2      
 125   2              lcd_write_val(addr_tab[ADDR_06],value_06);
 126   2          }
 127   1          
 128   1      }
 129          
 130          void wind_dis(uint8_t num)
 131          {
 132   1          value_0F &= 0x30;
 133   1          
 134   1          switch(num)
 135   1          {
 136   2              case 0:
 137   2                  value_0F |= 0x00;
 138   2                  break;
 139   2              
 140   2              case 1:
 141   2                  value_0F |= 0x40;
 142   2                  break;
 143   2              
 144   2              case 2:
 145   2                  value_0F |= 0xc0;
 146   2                  break;
 147   2              
 148   2              case 3:
 149   2                  value_0F |= 0xc8;
 150   2                  break;
 151   2              
 152   2              case 4:
 153   2                  value_0F |= 0xcc;
 154   2                  break;
 155   2              
 156   2              case 5:
 157   2                  value_0F |= 0xce;
 158   2                  break;
 159   2              
 160   2              case 6:
 161   2                  value_0F |= 0xcf;
 162   2                  break;
 163   2              
 164   2              default:
 165   2                  break;
 166   2          }
 167   1          
 168   1          lcd_write_val(addr_tab[ADDR_0F],value_0F);
 169   1      }
 170          
 171          void channel_dis(uint8_t num)
 172          {
 173   1          value_0E &= 0x80;
 174   1          value_0B &= 0x00;
 175   1          
 176   1          switch(num)
 177   1          {
 178   2              case 1:
C51 COMPILER V9.60.7.0   SCREEN                                                            04/03/2025 14:49:13 PAGE 4   

 179   2                  value_0E |= 0x04;
 180   2                  value_0B |= 0x40;
 181   2                  break;
 182   2              
 183   2              case 2:
 184   2                  value_0E |= 0x02;
 185   2                  value_0B |= 0x20;
 186   2                  break;
 187   2              
 188   2              case 3:
 189   2                  // value_0E |= 0x01;
 190   2                  // value_0B |= 0x10;
 191   2                  value_0E |= 0x06;
 192   2                  value_0B |= 0x60;
 193   2                  break;
 194   2              
 195   2              // case 4:
 196   2              //     value_0E |= 0x06;
 197   2              //     value_0B |= 0x60;
 198   2              //     break;
 199   2              
 200   2              // case 5:
 201   2              //     value_0E |= 0x03;
 202   2              //     value_0B |= 0x30;
 203   2              //     break;
 204   2              
 205   2              // case 6:
 206   2              //     value_0E |= 0x05;
 207   2              //     value_0B |= 0x50;
 208   2              //     break;
 209   2              
 210   2              // case 7:
 211   2              //     value_0E |= 0x07;
 212   2              //     value_0B |= 0x70;
 213   2              //     break;
 214   2              
 215   2              default:
 216   2                  break;
 217   2          }
 218   1          
 219   1          lcd_write_val(addr_tab[ADDR_0E],value_0E);
 220   1          lcd_write_val(addr_tab[ADDR_0B],value_0B);
 221   1      }
 222          
 223          void sun_dis(bit on_off)
 224          {
 225   1          value_0E &= 0xf7;
 226   1          if(on_off==DIS_ON)
 227   1          {
 228   2              value_0E |= 0x08;   
 229   2          }
 230   1          lcd_write_val(addr_tab[ADDR_0E],value_0E);
 231   1      }
 232          
 233          void sync_dis(bit on_off)
 234          {
 235   1          value_03 &= 0xef;
 236   1          if(on_off==DIS_ON)
 237   1          {
 238   2              value_03 |= 0x10;   
 239   2          }
 240   1          lcd_write_val(addr_tab[ADDR_03],value_03);
C51 COMPILER V9.60.7.0   SCREEN                                                            04/03/2025 14:49:13 PAGE 5   

 241   1      }
 242          
 243          void alarm_dis(bit on_off)
 244          {
 245   1          value_03 &= 0xdf;
 246   1          if(on_off==DIS_ON)
 247   1          {
 248   2              value_03 |= 0x20;   
 249   2          }
 250   1          lcd_write_val(addr_tab[ADDR_03],value_03);
 251   1      }
 252          
 253          //void F_dis(bit on_off)
 254          //{
 255          //    value_0E &= 0x7f;
 256          //    if(on_off==DIS_ON)
 257          //    {
 258          //        value_0E |= 0x80;   
 259          //    }
 260          //    lcd_write_val(addr_tab[ADDR_0E],value_0E);
 261          //}
 262          
 263          //void M_dis(bit on_off)
 264          //{
 265          //    value_0E &= 0xbf;
 266          //    if(on_off==DIS_ON)
 267          //    {
 268          //        value_0E |= 0x40;   
 269          //    }
 270          //    lcd_write_val(addr_tab[ADDR_0E],value_0E);
 271          //}
 272          
 273          //void R_dis(bit on_off)
 274          //{
 275          //    value_0E &= 0xdf;
 276          //    if(on_off==DIS_ON)
 277          //    {
 278          //        value_0E |= 0x20;   
 279          //    }
 280          //    lcd_write_val(addr_tab[ADDR_0E],value_0E);
 281          //}
 282          
 283          void Celsius_dis(bit on_off)
 284          {
 285   1          value_03 &= 0xbf;
 286   1          if(on_off==DIS_ON)
 287   1          {
 288   2              value_03 |= 0x40;   
 289   2          }
 290   1          lcd_write_val(addr_tab[ADDR_03],value_03);
 291   1      }
 292          
 293          void mode_dis(bit on_off)
 294          {
 295   1          value_03 &= 0x7f;
 296   1          if(on_off==DIS_ON)
 297   1          {
 298   2              value_03 |= 0x80;   
 299   2          }
 300   1          lcd_write_val(addr_tab[ADDR_03],value_03);
 301   1      }
 302          
C51 COMPILER V9.60.7.0   SCREEN                                                            04/03/2025 14:49:13 PAGE 6   

 303          void percentage_dis(bit on_off)
 304          {
 305   1          value_06 &= 0xf7;
 306   1          if(on_off==DIS_ON)
 307   1          {
 308   2              value_06 |= 0x08;   
 309   2          }
 310   1          lcd_write_val(addr_tab[ADDR_06],value_06);
 311   1      }
 312          
 313          //void cur_dis(bit on_off)
 314          //{
 315          //    value_03 &= 0xf7;
 316          //    if(on_off==DIS_ON)
 317          //    {
 318          //        value_03 |= 0x08;   
 319          //    }
 320          //    lcd_write_val(addr_tab[ADDR_03],value_03);
 321          //}
 322          
 323          //void set_dis(bit on_off)
 324          //{
 325          //    value_03 &= 0xfb;
 326          //    if(on_off==DIS_ON)
 327          //    {
 328          //        value_03 |= 0x04;   
 329          //    }
 330          //    lcd_write_val(addr_tab[ADDR_03],value_03);
 331          //}
 332          
 333          void fan_center_dis(bit on_off)
 334          {
 335   1          value_0F &= 0xdf;
 336   1          if(on_off==DIS_ON)
 337   1          {
 338   2              value_0F |= 0x20;   
 339   2          }
 340   1          lcd_write_val(addr_tab[ADDR_0F],value_0F);
 341   1      }
 342          
 343          void fan_leaf1_dis(bit on_off)
 344          {
 345   1          value_0E &= 0xef;
 346   1          if(on_off==DIS_ON)
 347   1          {
 348   2              value_0E |= 0x10;   
 349   2          }
 350   1          lcd_write_val(addr_tab[ADDR_0E],value_0E);
 351   1      }
 352          
 353          void fan_leaf2_dis(bit on_off)
 354          {
 355   1          value_0F &= 0xef;
 356   1          if(on_off==DIS_ON)
 357   1          {
 358   2              value_0F |= 0x10;   
 359   2          }
 360   1          lcd_write_val(addr_tab[ADDR_0F],value_0F);
 361   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.60.7.0   SCREEN                                                            04/03/2025 14:49:13 PAGE 7   

   CODE SIZE        =    857    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     24       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       9
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
