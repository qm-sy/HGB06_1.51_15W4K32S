C51 COMPILER V9.60.7.0   TIMER                                                             01/21/2025 14:39:44 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN .\Output\timer.obj
COMPILER INVOKED BY: D:\APP\Keil_v5\C51\BIN\C51.EXE Src\timer.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Inc;D:\APP\Keil_
                    -v5\C51\INC) DEBUG OBJECTEXTEND PRINT(.\Listings\timer.lst) OBJECT(.\Output\timer.obj)

line level    source

   1          #include "STC15W4Kxx.h"
   2          #include "timer.h"
   3          #include "stdint.h"
   4          #include "key.h"
   5          #include "adc.h"
   6          bit fan_dis_bit = 0;
   7          bit temp_dis_bit = 0;
   8          bit zero_bit = 0;
   9          bit buzzer_bit = 1;
  10          bit scan_stop_bit = 1;
  11          bit scan_start_bit = 0;  
  12          bit master_pwm_bit = 0;
  13          bit power_bit = 1;
  14          bit power_bit2 = 0;
  15          bit wind_bit = 1;
  16          bit previous_value = 0;
  17          bit delay_bit1 = 0;
  18          bit delay_bit2 = 0;
  19          bit delay_bit3 = 0;
  20          bit temp_listen_bit = 0;
  21          uint16_t pwm_adc_val = 0;
  22          uint16_t ntc6_adc_val = 0;
  23          uint8_t pwm_adc_cnt = 0;
  24          uint8_t channel_num = 1;
  25          uint16_t tim1_t = 58400;
  26          uint8_t pwm_num_cnt = 0;
  27          uint8_t temp_listen_cnt = 1;
  28          uint8_t fengshan_delay = 5;
  29          
  30          void Tim0Init()         //11.0592Mhz  2333us
  31          {
  32   1              AUXR &= 0x7F;                   //定时器时钟12T模式
  33   1              TMOD &= 0xF0;                   //设置定时器模式
  34   1              TL0 = 0x9A;                             //设置定时初始值
  35   1              TH0 = 0xF7;                             //设置定时初始值
  36   1              TF0 = 0;                                //清除TF0标志
  37   1              TR0 = 1;                                //定时器0开始计时
  38   1      
  39   1              ET0 = 1;            //打开IE-ET0，TIM0中断
  40   1      }
  41          
  42          
  43          void Tim1Init()         //11.0592Mhz  10ms  16位手动装载
  44          {   
  45   1              AUXR &= 0xBF;       //定时器时钟12T模式
  46   1              TMOD &= 0x0F;       //设置定时器模式
  47   1              TMOD |= 0x10;       //设置定时器模式   手动/自动开关
  48   1      }
  49          
  50          void Tim3Init(void)             //10毫秒@11.0592MHz
  51          {
  52   1              T4T3M &= 0xFD;      //定时器时钟12T模式
  53   1              T3L = 0x00;         //设置定时初始值
  54   1              T3H = 0xDC;         //设置定时初始值
C51 COMPILER V9.60.7.0   TIMER                                                             01/21/2025 14:39:44 PAGE 2   

  55   1              T4T3M |= 0x08;      //定时器3开始计时
  56   1          
  57   1          IE2 |= 0x20; //打开IE2-ET2，TIM3中断
  58   1      }
  59          
  60          void ET0ISR(void) interrupt 0 
  61          {
  62   1          tempchannel1 = tempchannel2 = tempchannel3 = 1;    
  63   1              /*延时移相*/
  64   1          TL1 = tim1_t;                               //设置定时初始值
  65   1              TH1 = tim1_t>>8;                                //设置定时初始值
  66   1      
  67   1          zero_bit = 1;
  68   1          
  69   1          TR1 = 1;                            //定时器1开始计时      
  70   1          ET1 = 1; 
  71   1      }
  72          
  73          void Tim0Isr(void) interrupt 1 
  74          {
  75   1          pwm_adc_val = Get_ADC12bitResult(7);
  76   1          ntc6_adc_val = Get_ADC12bitResult(6);
  77   1          if( pwm_adc_val < 500 )
  78   1          {
  79   2              pwm_adc_cnt++;
  80   2              if( pwm_adc_cnt == 100 ) 
  81   2              {
  82   3                  pwm_adc_cnt    = 0;
  83   3                  master_pwm_bit = 0; 
  84   3                  previous_value = 0;
  85   3              }
  86   2          }
  87   1          if( pwm_adc_val > 800 )
  88   1          {
  89   2              pwm_adc_cnt = 0;
  90   2              master_pwm_bit = 1;
  91   2              previous_value = 1;
  92   2          }
  93   1      
  94   1      }
  95          
  96          void Tim1Isr(void) interrupt 3 
  97          {
  98   1      
  99   1          if((zero_bit == 1)&&(power_bit == 1))
 100   1          {
 101   2              switch(channel_num)
 102   2              {
 103   3                  case 1: {tempchannel1=0; tempchannel2=1; tempchannel3=1;}break;
 104   3                  case 2: {tempchannel1=1; tempchannel2=0; tempchannel3=1;}break;
 105   3                  case 3: {tempchannel1=1; tempchannel2=1; tempchannel3=0;}break;
 106   3                  case 4: {tempchannel1=0; tempchannel2=0; tempchannel3=1;}break;
 107   3                  case 5: {tempchannel1=1; tempchannel2=0; tempchannel3=0;}break;
 108   3                  case 6: {tempchannel1=0; tempchannel2=1; tempchannel3=0;}break;
 109   3                  case 7: {tempchannel1=0; tempchannel2=0; tempchannel3=0;}break;
 110   3              }
 111   2                  /*发送一个10us的脉冲*/
 112   2                  zero_bit = 0; 
 113   2      
 114   2                  TL1 = 0xF7;                         //设置定时初始值
 115   2                  TH1 = 0xFF;                         //设置定时初始值
 116   2          }
C51 COMPILER V9.60.7.0   TIMER                                                             01/21/2025 14:39:44 PAGE 3   

 117   1        
 118   1          else
 119   1          {
 120   2              tempchannel1 = tempchannel2 = tempchannel3 = 1;     //1-0-1的脉冲 2us
 121   2              TR1 = 0;                                //定时器关闭计时      
 122   2              ET1 = 0; 
 123   2          }
 124   1      }
 125          
 126          void Tim3Isr(void) interrupt 19 
 127          {
 128   1          static uint8_t buzzer_continue_cnt = 0;
 129   1          static uint8_t sacn_cnt = 0;
 130   1          static uint8_t key_cnt = 0;
 131   1          static uint8_t sync_delay_cnt = 0;
 132   1          static uint8_t temp_delay_cnt = 0;
 133   1          static uint8_t fan_rotate_cnt = 0;
 134   1          static uint8_t temp_rotate_cnt = 0;
 135   1          static uint16_t fan_delay_cnt = 0;
 136   1          
 137   1          if((delay_bit1 == 1)&&(delay_bit2 == 1))
 138   1          {
 139   2              fan_delay_cnt++;
 140   2              if(fan_delay_cnt == fengshan_delay*100)
 141   2              {
 142   3                  fan_delay_cnt = 0;
 143   3                  delay_bit1 = 0;
 144   3                  delay_bit2 = 0;
 145   3                  delay_bit3 = 1;
 146   3              }
 147   2          }
 148   1          if((delay_bit1&delay_bit2)==0)
 149   1          {
 150   2              fan_delay_cnt = 0;
 151   2          }
 152   1      //    if((delay_bit1 == 1)&&(delay_bit2 == 0))
 153   1      //    {
 154   1      //        fan_delay_cnt = 0;
 155   1      //    }
 156   1          fan_rotate_cnt++;
 157   1          if(fan_rotate_cnt>15)
 158   1          {
 159   2              fan_dis_bit = ~fan_dis_bit;
 160   2              fan_rotate_cnt = 0;
 161   2          }
 162   1          
 163   1          temp_rotate_cnt++;
 164   1          if(temp_rotate_cnt>50)
 165   1          {
 166   2              temp_dis_bit = ~temp_dis_bit;
 167   2              temp_rotate_cnt = 0;
 168   2          }
 169   1          
 170   1          key_cnt++;
 171   1          if(key_cnt>5)
 172   1          {
 173   2              key_cnt=0; 
 174   2              key_val = (P0&0X0f);
 175   2          }
 176   1          
 177   1          if(sync_delay_bit == 1)
 178   1          {
C51 COMPILER V9.60.7.0   TIMER                                                             01/21/2025 14:39:44 PAGE 4   

 179   2              sync_delay_cnt++;
 180   2              if(sync_delay_cnt>150)
 181   2              {
 182   3                  sync_delay_bit = 0;
 183   3                  sync_delay_cnt = 0;
 184   3              }
 185   2          }
 186   1      
 187   1          if(temp_delay_bit == 1)
 188   1          {
 189   2              temp_delay_cnt++;
 190   2              if(temp_delay_cnt>150)
 191   2              {
 192   3                  temp_delay_cnt = 0;
 193   3              }
 194   2          }
 195   1          
 196   1          if(buzzer_bit==0)
 197   1          {
 198   2              buzzer_continue_cnt++;
 199   2              if(buzzer_continue_cnt>10)
 200   2              {
 201   3                  buzzer_continue_cnt=0; 
 202   3                  buzzer=buzzer_bit=1;
 203   3              }
 204   2          } 
 205   1          
 206   1          if(scan_stop_bit == 1)
 207   1          {
 208   2              sacn_cnt++;
 209   2              if(sacn_cnt>10)
 210   2              {
 211   3                  scan_start_bit = 1;
 212   3                  scan_stop_bit = 0;
 213   3                  sacn_cnt = 0;
 214   3              }
 215   2          }
 216   1      
 217   1          // if(temp_listen_bit == 1)
 218   1          // {
 219   1          //     temp_listen_cnt++;
 220   1          //     if(temp_listen_cnt>150)
 221   1          //     {
 222   1          //         temp_listen_bit = 0;
 223   1          //         temp_listen_cnt = 0;
 224   1          //     }
 225   1          // }
 226   1             
 227   1      //    if(P07==0)
 228   1      //    {
 229   1      //        master_pwm_bit = 1;   //24V接入
 230   1      //        previous_value = 1;
 231   1      //    }
 232   1      //    if(P07==1)
 233   1      //    {
 234   1      //        master_pwm_bit = 0;
 235   1      //        previous_value = 0;
 236   1      //    }
 237   1      //    
 238   1          
 239   1      
 240   1      }
C51 COMPILER V9.60.7.0   TIMER                                                             01/21/2025 14:39:44 PAGE 5   

 241          
 242          void power_crl(uint8_t power_num)
 243          { 
 244   1          if(power_bit==1)
 245   1          {
 246   2              ET1 = 1;
 247   2          }
 248   1          else
 249   1          {
 250   2              ET1 = 0;
 251   2          }
 252   1          
 253   1          tim1_t = power_num*64+58400;
 254   1          
 255   1      //    TL1 = tim1_t;                   //设置定时初始值
 256   1      //    TH1 = tim1_t>>8;                          //设置定时初始值
 257   1      
 258   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    613    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     20    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =     15    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
